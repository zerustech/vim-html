# Test case
Before (Initilize):
  let b:html_indent_custom_block_tags = []
  let custom_tag = ['{#', 7, '#}', 'comment', ':,:', '\zs:\ze,\zs:\ze', 's:Alien5']
  call add(b:html_indent_custom_block_tags, custom_tag)
  runtime! indent/html.vim

After (Cleanup):
  unlet b:did_indent
  let g:force_reload_html = 1

Execute (HtmlIndent_CheckUserSettings()):
  unlet b:html_indent_line_limit

  let b:html_indent_inctags = 'test-tag-a,test-tag-b,test-tag-c,test-tag-d'
  let b:html_indent_autotags = 'test-tag-c,test-tag-d'
  let b:html_indent_string_names = ["htmlstring001","htmlstring002"]
  let b:html_indent_tag_names = ["htmltag001","htmltag002"]
  let b:html_indent_script1 = 'auto'
  let b:html_indent_style1 = 'zero'
  let g:html_indent_line_limit = 100

  call HtmlIndent_CheckUserSettings()

  Assert 1 == b:hi_tags['test-tag-a']
  Assert -1 == b:hi_tags['/test-tag-a']
  Assert 1 == b:hi_tags['test-tag-b']
  Assert -1 == b:hi_tags['/test-tag-b']

  Assert 1 == b:hi_removed_tags['test-tag-c']
  Assert 1 == b:hi_removed_tags['/test-tag-c']
  Assert 1 == b:hi_removed_tags['test-tag-d']
  Assert 1 == b:hi_removed_tags['/test-tag-d']

  Assert 'htmlstring001' == b:hi_insideStringNames[1]
  Assert 'htmlstring002' == b:hi_insideStringNames[2]

  Assert 'htmltag001' == b:hi_insideTagNames[2]
  Assert 'htmltag002' == b:hi_insideTagNames[3]

  Assert 'indent(prevnonblank(v:lnum-1))' == b:hi_js1indent
  Assert '0' == b:hi_css1indent

  Assert 100 == b:html_indent_line_limit

  let block_tags = HtmlIndentGet('s:block_tags')
  let block_start_tags = HtmlIndentGet('s:block_start_tags')
  let block_end_tags = HtmlIndentGet('s:block_end_tags')

  Assert '{#' == block_tags[7].start
  Assert '#}' == block_tags[7].end
  Assert 'comment' == block_tags[7].type
  Assert ':,:' == block_tags[7].brackets
  Assert '\zs:\ze,\zs:\ze' == block_tags[7].bracket_patterns
  Assert 's:Alien5' == block_tags[7].indent_alien
  Assert -1 != match(block_start_tags[2], '{#')
  Assert -1 != match(block_end_tags[2], '#}')

  unlet b:html_indent_inctags
  unlet b:html_indent_autotags
  unlet b:html_indent_string_names
  unlet b:html_indent_tag_names
  unlet b:html_indent_script1
  unlet b:html_indent_style1
  unlet g:html_indent_line_limit

Given (Fixtures of s:PushCursor() and s:PopCursor()):
  <div>
      <div>
      </div>
  </div>

Execute (s:PushCursor() and s:PopCursor()):
  call cursor(1, 1)

  Assert [] == HtmlIndentGet('b:cursor_stack')

  call HtmlIndentCall('s:PushCursor', [])
  Assert[[1, 1]] == HtmlIndentGet('b:cursor_stack')

  call cursor(2, 5)
  Assert [2, 5] == [line('.'), col('.')]

  call HtmlIndentCall('s:PopCursor', [])
  Assert[1, 1] == [line('.'), col('.')]

Given (Fixtures of s:CurrentBlockId()):
  <div></div><p></p>
  <p></p><pre>
      <div></div><p></p>
  </pre>
  <!--[...]>
      <p></p><pre>
          <p></p>
      <div></div></pre><p></p>
  <![endif]-->
  <pre>
      <p></p><div>
      </div><p></p>
  </pre>
  <pre>
      <p></p><div>
      </div>
      <p></p>
  </pre>
  <!--[...]>
      <p></p><pre>
          <p></p>
      <div></div></pre>
      <p></p>
  <![endif]-->
  <!--[...]>
      <div><pre><div><script>
      </script></div></pre>
      </div>
  <![endif]-->

Execute (s:CurrentBlockId()):
  let method = 's:CurrentBlockId'

  " <div></div><p></p>
  "            ^ <- cursor
  call cursor(1, 12)
  Assert 0 == HtmlIndentCall(method, [])
  Assert [1, 12] == [line('.'), col('.')]

  " <p></p><pre>
  "     <div></div><p></p>
  "                ^ <- cursor
  call cursor(3, 16)
  Assert 2 == HtmlIndentCall(method, [])
  Assert [3, 16] == [line('.'), col('.')]

  " <!--[...]>
  "    <p></p><pre>
  "        <p></p>
  "    <div></div></pre><p></p>
  "                     ^ <- cursor
  call cursor(8, 22)
  Assert 6 == HtmlIndentCall(method, [])
  Assert [8, 22] == [line('.'), col('.')]

  " A line inside a block is aligned to the line of the block start tag.
  " --------------------------------------------------------------------
  " <p></p><pre>
  "        ^ <- cursor moves here to calculate indents of block start tag.
  call cursor(2, 8)
  Assert 0 == HtmlIndentCall(method, [])
  Assert [2, 8] == [line('.'), col('.')]

  " A line inside a block is aligned to the line of the block start tag.
  " In this case, the block tag is inside another block.
  " --------------------------------------------------------------------
  " <!--[...]>
  "    <p></p><pre>
  "           ^ <- cursor moves here to calculate indents of block start tag.
  call cursor(6, 12)
  Assert 6 == HtmlIndentCall(method, [])
  Assert [6, 12] == [line('.'), col('.')]

  " A line starts with an end tag is aligned to the line of the start tag.
  " ----------------------------------------------------------------------
  " <pre>
  "     <p></p><div>
  "            ^ <- cursor moves here to calculate indents of the start tag.
  call cursor(11, 12)
  Assert 2 == HtmlIndentCall(method, [])
  Assert [11, 12] == [line('.'), col('.')]

  " A line that comes immediately after an end tag is aligned to the line of the
  " start tag.
  " ----------------------------------------------------------------------------
  " <pre>
  "     <p></p><div>
  "            ^ <- cursor moves here to calculate indents of the start tag.
  "     </div>
  call cursor(15, 12)
  Assert 2 == HtmlIndentCall(method, [])
  Assert [15, 12] == [line('.'), col('.')]

  " A line that comes immediately after the line of a block end tag is aligned
  " to the line of the block start tag.
  " ---------------------------------------
  " <!--[...]>
  "    <p></p><pre>
  "           ^ <- cursor moves here to calculate indents of the block start tag
  "        <p></p>
  "    <div></div></pre>
  call cursor(20, 12)
  Assert 6 == HtmlIndentCall(method, [])
  Assert [20, 12] == [line('.'), col('.')]

  " There is a block start tag in the line being checked, in this case, skip
  " this tag and continue to look backward for an other block start tag before
  " current line.
  " --------------------------------------------------------------------------
  " <!--[...]>
  "     <div><pre><div><script>
  "                    ^ <- cursor
  "     </script></div></pre>
  "     </div>
  " <![endif]-->
  call cursor(26, 20)
  Assert 6 == HtmlIndentCall(method, [])
  Assert [26, 20] == [line('.'), col('.')]

Given (Fixtures of s:FindBlockStartTag()):
  <div><pre>
      </pre></div>

Execute (s:FindBlockStartTag()):
  let method = 's:FindBlockStartTag'

  " <div><pre>
  "    </pre></div>
  "     ^ <- cursor
  call cursor(2, 5)
  Assert 1 == HtmlIndentCall(method, ['/pre'])
  Assert [1, 6] == [line('.'), col('.')]

  " <div><pre>
  "    </pre></div>
  "     ^ <- cursor
  call cursor(2, 5)
  Assert 0 == HtmlIndentCall(method, ['/script'])
  Assert [2, 5] == [line('.'), col('.')]

Execute (s:IndexOfBlockTagStartBracket()):
  let method = 's:IndexOfBlockTagStartBracket'
  Assert 5 == HtmlIndentCall(method, ['<div><pre><p></p></pre></div>', 'pre', 6])
  Assert 17 == HtmlIndentCall(method, ['<div><pre><p></p></pre></div>', '/pre', 18])
  Assert 5 == HtmlIndentCall(method, ['<div><!--[...]><p></p><![endif]--></div>', '!--[', 6])
  Assert 22 == HtmlIndentCall(method, ['<div><!--[...]><p></p><![endif]--></div>', '![endif]--', 23])
  Assert 5 == HtmlIndentCall(method, ['<div>{#<p></p>#}</div>', '{#', 5])
  Assert 14 == HtmlIndentCall(method, ['<div>{#<p></p>#}</div>', '#}', 14])

Execute (s:IndexOfBlockTagEndBracket()):
  let method = 's:IndexOfBlockTagEndBracket'
  Assert 9 == HtmlIndentCall(method, ['<div><pre><p></p></pre></div>', 'pre', 6])
  Assert 22 == HtmlIndentCall(method, ['<div><pre><p></p></pre></div>', '/pre', 18])
  Assert 14 == HtmlIndentCall(method, ['<div><!--[...]><p></p><![endif]--></div>', '!--[', 6])
  Assert 33 == HtmlIndentCall(method, ['<div><!--[...]><p></p><![endif]--></div>', '![endif]--', 23])
  Assert 6 == HtmlIndentCall(method, ['<div>{#<p></p>#}</div>', '{#', 5])
  Assert 15 == HtmlIndentCall(method, ['<div>{#<p></p>#}</div>', '#}', 14])

Given (Fixtures for SearchStringPosition()):
  <div><p>
  </p></div>

Execute (s:SearchStringPosition()):
  let method = 's:SearchStringPosition'

  " <div><p>
  " </p></div>
  " ^ <- cursor
  call cursor(2, 1)
  let actual = HtmlIndentCall(method, ['<div\>', 'bnW', 0])
  Assert ['<div', 1, 1, 4] == actual
  Assert [2, 1] == [line('.'), col('.')]

  " <div><p>
  " </p></div>
  " ^ <- cursor
  call cursor(2, 1)
  let actual = HtmlIndentCall(method, ['<\zsdiv\>', 'bnW', 0])
  Assert ['div', 1, 2, 4] == actual
  Assert [2, 1] == [line('.'), col('.')]


  " <div><p>
  " ^ <- cursor
  " </p></div>
  call cursor(1, 1)
  let actual = HtmlIndentCall(method, ['</div\>', '', 2])
  Assert ['</div', 2, 5, 9] == actual
  Assert [2, 5] == [line('.'), col('.')]

  " <div><p>
  " ^ <- cursor
  " </p></div>
  call cursor(1,1)
  let actual = HtmlIndentCall(method, ['<\zs/div\>', 'nW', 2])
  Assert ['/div', 2, 6, 9] == actual
  Assert [1, 1] == [line('.'), col('.')]

Execute (s:AddITags):
  let method = 's:AddITags'
  let target = {}
  let source = ['tag001']
  let actual = HtmlIndentCall(method, [target, source])

  Assert 1 == target['tag001']
  Assert -1 == target['/tag001']

Execute (s:RemoveITags):
  let method = 's:RemoveITags'
  let target = {}
  let source = ['tag001']
  let actual = HtmlIndentCall(method, [target, source])

  Assert 1 == target['tag001']
  Assert 1 == target['/tag001']

Execute (s:AddBlockTag):
  let method = 's:AddBlockTag'
  let block_tags = HtmlIndentGet('s:block_tags')
  let block_start_tags = HtmlIndentGet('s:block_start_tags')
  let block_end_tags = HtmlIndentGet('s:block_end_tags')

  let actual = HtmlIndentCall(method, ['tag001', 8])

  Assert 'tag001' == block_tags[8].start
  Assert '/tag001' == block_tags[8].end
  Assert 'block' == block_tags[8].type
  Assert '<:>,<:>' == block_tags[8].brackets
  Assert '<\zs:\>,<\zs:\>' == block_tags[8].bracket_patterns
  Assert 's:Alien8' == block_tags[8].indent_alien
  Assert -1 != match(block_start_tags[6], 'tag001')
  Assert -1 != match(block_end_tags[7], '/tag001')

  let actual = HtmlIndentCall(method, ['tag002-start', 9, 'tag002-end'])

  Assert 'tag002-start' == block_tags[9].start
  Assert 'tag002-end' == block_tags[9].end
  Assert 'block' == block_tags[9].type
  Assert '<:>,<:>' == block_tags[9].brackets
  Assert '<\zs:\>,<\zs:\>' == block_tags[9].bracket_patterns
  Assert 's:Alien9' == block_tags[9].indent_alien
  Assert -1 != match(block_start_tags[12], 'tag002-start')
  Assert -1 != match(block_end_tags[10], 'tag002-end')

  let actual = HtmlIndentCall(method, ['tag003-start', 10, 'tag003-end', 'custom'])

  Assert 'tag003-start' == block_tags[10].start
  Assert 'tag003-end' == block_tags[10].end
  Assert 'custom' == block_tags[10].type
  Assert '<:>,<:>' == block_tags[10].brackets
  Assert '<\zs:\>,<\zs:\>' == block_tags[10].bracket_patterns
  Assert 's:Alien10' == block_tags[10].indent_alien
  Assert -1 != match(block_start_tags[12], 'tag003-start')
  Assert -1 != match(block_end_tags[10], 'tag003-end')

  let actual = HtmlIndentCall(method, ['tag004-start', 11, 'tag004-end', 'custom', '<:,:>'])

  Assert 'tag004-start' == block_tags[11].start
  Assert 'tag004-end' == block_tags[11].end
  Assert 'custom' == block_tags[11].type
  Assert '<:,:>' == block_tags[11].brackets
  Assert '<\zs:\>,<\zs:\>' == block_tags[11].bracket_patterns
  Assert 's:Alien11' == block_tags[11].indent_alien
  Assert -1 != match(block_start_tags[12], 'tag004-start')
  Assert -1 != match(block_end_tags[10], 'tag004-end')

  let actual = HtmlIndentCall(method, ['tag005-start', 12, 'tag005-end', 'custom', '{:,:}', '{\zs:\>,\zs:\>'])

  Assert 'tag005-start' == block_tags[12].start
  Assert 'tag005-end' == block_tags[12].end
  Assert 'custom' == block_tags[12].type
  Assert '{:,:}' == block_tags[12].brackets
  Assert '{\zs:\>,\zs:\>' == block_tags[12].bracket_patterns
  Assert 's:Alien12' == block_tags[12].indent_alien
  Assert -1 != match(block_start_tags[12], 'tag005-start')
  Assert -1 != match(block_end_tags[10], 'tag005-end')

  let actual = HtmlIndentCall(method, ['tag006-start', 13, 'tag006-end', 'custom', '{:,:}', '{\zs:\>,\zs:\>', 'CustomIndent'])

  Assert 'tag006-start' == block_tags[13].start
  Assert 'tag006-end' == block_tags[13].end
  Assert 'custom' == block_tags[13].type
  Assert '{:,:}' == block_tags[13].brackets
  Assert '{\zs:\>,\zs:\>' == block_tags[13].bracket_patterns
  Assert 'CustomIndent' == block_tags[13].indent_alien
  Assert -1 != match(block_start_tags[12], 'tag006-start')
  Assert -1 != match(block_end_tags[10], 'tag006-end')

Execute (s:IsStartTag()):
  let method = 's:IsStartTag'

  Assert 1 == HtmlIndentCall(method, ['foo'])
  Assert 1 == HtmlIndentCall(method, ['div'])
  Assert 1 == HtmlIndentCall(method, ['script'])
  Assert 1 == HtmlIndentCall(method, ['!--['])
  Assert 1 == HtmlIndentCall(method, ['!--'])
  Assert 1 == HtmlIndentCall(method, ['{#'])

  Assert 0 == HtmlIndentCall(method, ['/foo'])
  Assert 0 == HtmlIndentCall(method, ['/div'])
  Assert 0 == HtmlIndentCall(method, ['/script'])
  Assert 0 == HtmlIndentCall(method, ['![endif]--'])
  Assert 0 == HtmlIndentCall(method, ['--'])
  Assert 0 == HtmlIndentCall(method, ['#}'])

Execute (s:IsEndTag()):
  let method = 's:IsEndTag'

  Assert 0 == HtmlIndentCall(method, ['foo'])
  Assert 0 == HtmlIndentCall(method, ['div'])
  Assert 0 == HtmlIndentCall(method, ['script'])
  Assert 0 == HtmlIndentCall(method, ['!--['])
  Assert 0 == HtmlIndentCall(method, ['!--'])
  Assert 0 == HtmlIndentCall(method, ['{#'])

  Assert 1 == HtmlIndentCall(method, ['/foo'])
  Assert 1 == HtmlIndentCall(method, ['/div'])
  Assert 1 == HtmlIndentCall(method, ['/script'])
  Assert 1 == HtmlIndentCall(method, ['![endif]--'])
  Assert 1 == HtmlIndentCall(method, ['--'])
  Assert 1 == HtmlIndentCall(method, ['#}'])

Execute (s:StartTagPattern()):
  let method = 's:StartTagPattern'

  Assert '<\zsfoo\>' == HtmlIndentCall(method, ['foo'])
  Assert '<\zsdiv\>' == HtmlIndentCall(method, ['div'])
  Assert '<\zsscript\>' == HtmlIndentCall(method, ['script'])
  Assert '<\zs!--\[\ze' == HtmlIndentCall(method, ['!--['])
  Assert '<\zs!--\ze' == HtmlIndentCall(method, ['!--'])
  Assert '\zs{#\ze' == HtmlIndentCall(method, ['{#'])

  Assert '<foo\>' == HtmlIndentCall(method, ['foo', 0])
  Assert '<div\>' == HtmlIndentCall(method, ['div', 0])
  Assert '<script\>' == HtmlIndentCall(method, ['script', 0])
  Assert '<!--\[\ze' == HtmlIndentCall(method, ['!--[', 0])
  Assert '<!--\ze' == HtmlIndentCall(method, ['!--', 0])
  Assert '{#\ze' == HtmlIndentCall(method, ['{#', 0])

Execute (s:EndTagPattern()):
  let method = 's:EndTagPattern'

  Assert '<\zs/foo\>' == HtmlIndentCall(method, ['/foo'])
  Assert '<\zs/div\>' == HtmlIndentCall(method, ['/div'])
  Assert '<\zs/script\>' == HtmlIndentCall(method, ['/script'])
  Assert '<\zs!\[endif\]--\ze>' == HtmlIndentCall(method, ['![endif]--'])
  Assert '\zs--\ze>' == HtmlIndentCall(method, ['--'])
  Assert '\zs#}\ze' == HtmlIndentCall(method, ['#}'])

  Assert '</foo\>' == HtmlIndentCall(method, ['/foo', 0])
  Assert '</div\>' == HtmlIndentCall(method, ['/div', 0])
  Assert '</script\>' == HtmlIndentCall(method, ['/script', 0])
  Assert '<!\[endif\]--\ze>' == HtmlIndentCall(method, ['![endif]--', 0])
  Assert '--\ze>' == HtmlIndentCall(method, ['--', 0])
  Assert '#}\ze' == HtmlIndentCall(method, ['#}', 0])

Execute (s:StartTag()):
  let method = 's:StartTag'

  Assert 'foo' == HtmlIndentCall(method, ['/foo'])
  Assert 'div' == HtmlIndentCall(method, ['/div'])
  Assert 'script' == HtmlIndentCall(method, ['/script'])
  Assert '!--[' == HtmlIndentCall(method, ['![endif]--'])
  Assert '!--' == HtmlIndentCall(method, ['--'])
  Assert '{#' == HtmlIndentCall(method, ['#}'])

Execute (s:StartsWithEndTagPattern()):
  let method = 's:StartsWithEndTagPattern'

  Assert '^\s*\%\(<\zs!\[endif\]--\ze>\|<\zs/script\>\|<\zs/style\>\|<\zs/pre\>\|\zs--\ze>\|\zs#}\ze\|<\zs/\w\+\(-\w\+\)\+\>\|<\zs/\w\+\>\)' == HtmlIndentCall(method, [])

Execute (s:BlockStartTagPattern()):
  let method = 's:BlockStartTagPattern'

  Assert '<\zsscript\>\|<\zsstyle\>\|<\zs!--\[\ze\|<\zspre\>\|<\zs!--\ze\|\zs{#\ze' == HtmlIndentCall(method, [])

Execute (s:BlockEndTagPattern()):
  let method = 's:BlockEndTagPattern'

  Assert '<\zs!\[endif\]--\ze>\|<\zs/script\>\|<\zs/style\>\|<\zs/pre\>\|\zs--\ze>\|\zs#}\ze' == HtmlIndentCall(method, [])

Execute (s:BlockTagPattern()):
  let method = 's:BlockTagPattern'

  Assert '<\zs!\[endif\]--\ze>\|<\zs/script\>\|<\zs/style\>\|<\zs/pre\>\|\zs--\ze>\|\zs#}\ze\|<\zsscript\>\|<\zsstyle\>\|<\zs!--\[\ze\|<\zspre\>\|<\zs!--\ze\|\zs{#\ze' == HtmlIndentCall(method, [])

Execute (s:GetTag()):
  let method = 's:GetTag'

  Assert 0 == HtmlIndentCall(method, ['foo'])
  Assert 0 == HtmlIndentCall(method, ['/foo'])
  Assert 1 == HtmlIndentCall(method, ['div'])
  Assert -1 == HtmlIndentCall(method, ['/div'])

  unlet b:did_indent
  let b:html_indent_autotags = 'div'
  let b:html_indent_inctags = 'tag001'
  runtime! indent/html.vim
  unlet b:html_indent_autotags
  unlet b:html_indent_inctags

  Assert 0 == HtmlIndentCall(method, ['div'])
  Assert 0 == HtmlIndentCall(method, ['/div'])

  Assert 1 == HtmlIndentCall(method, ['tag001'])
  Assert -1 == HtmlIndentCall(method, ['/tag001'])

Execute (s:CheckCustomTag()):
  let method = 's:CheckCustomTag'

  " Non-custom tags
  " ---------------
  " </noncustomtag>
  "  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = 0
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [0]
  let tag_counter.next_line_offset_stack = [0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 0 == HtmlIndentCall(method, ['/noncustomtag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Custom start tag, and block is 0.
  " ---------------------------------
  " </div><div><custom-tag>
  "             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [2] == tag_counter.next_line_offset_stack

  " custom start tag, and block is 6.
  " ---------------------------------
  " <!--[...]><div>
  "     </div><div><custom-tag>
  "                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [2] == tag_counter.next_line_offset_stack

  " Custom start tag, and block is 2.
  " ---------------------------------
  " </div><div><pre><custom-tag>
  "                  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [1] == tag_counter.next_line_offset_stack

  " Custom end tag, and block is 0.
  " -------------------------------
  " </div><custom-tag></custom-tag>
  "                    ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Custom end tag, and block is 6.
  " -------------------------------
  " <!--[...]><custom-tag><div>
  " </div></custom-tag>
  "        ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -2 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [-2] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Custom end tag, and block is 2.
  " -------------------------------
  " </div><div><pre><custom-tag></custom-tag>
  "                              ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

Execute (s:CheckBlockTag()):
  let method = 's:CheckBlockTag'

  " Block start tag, and root block is 2
  " ---------------------------------------
  " <pre>
  "     </div><div><!--[...]><div>
  "                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 2]
  let tag_counter.block_index = 1
  let tag_counter.block = 2
  let tag_counter.current_line_offset = 0
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [0]
  let tag_counter.next_line_offset_stack = [0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [6])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 2, 6] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0, 0] == tag_counter.current_line_offset_stack
  Assert [0, 0] == tag_counter.next_line_offset_stack

  " Block start tag, and current block is 2
  " ---------------------------------------
  " </div><div><pre><!--[...]><div>
  "                  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 2]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [6])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 2, 6] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0, 0] == tag_counter.next_line_offset_stack

  " Block end tag, and root block is 2.
  " -----------------------------------
  " <pre><div>
  "     </div><div><script></script>
  "                         ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 2, 3]
  let tag_counter.block_index = 1
  let tag_counter.block = 2
  let tag_counter.current_line_offset = 0
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [0, 0]
  let tag_counter.next_line_offset_stack = [0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 2] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack


  " Block end tag, and current block is 2.
  " ------------------------------------------------------------
  " </div><div><pre><script></script>
  "                          ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 2, 3]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0, 0]
  let tag_counter.next_line_offset_stack = [1, 0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 2] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

  " Block start tag, and root block is 0
  " ------------------------------------
  " </div><div><pre><div>
  "             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0]
  let tag_counter.block_index = 1
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 2] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

  " Block start tag, and root block is 6
  " ------------------------------------
  " <!--[...]>
  "     </div><div><pre><div>
  "                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 6]
  let tag_counter.block_index = 1
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 6, 2] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

  " Block start tag, and current block is 6
  " ---------------------------------------
  " <!--[...]></div><div><pre><div>
  "                       ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 6]
  let tag_counter.block_index = 2
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1]
  let tag_counter.next_line_offset_stack = [0, 1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 6, 2] == tag_counter.block_stack
  Assert 3 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [0, -1, 0] == tag_counter.current_line_offset_stack
  Assert [0, 1, 0] == tag_counter.next_line_offset_stack

  " Block start tag, and current block is 2, and parent block is 6.
  " ---------------------------------------------------------------
  " <!--[...]></div><div><pre><script>
  "                            ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 6, 2]
  let tag_counter.block_index = 3
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1, 0]
  let tag_counter.next_line_offset_stack = [0, 1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 6, 2, 3] == tag_counter.block_stack
  Assert 3 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [0, -1, 0, 0] == tag_counter.current_line_offset_stack
  Assert [0, 1, 0, 0] == tag_counter.next_line_offset_stack

  " Block end tag, and root block is 0.
  " -----------------------------------
  " </div><div><pre><div></div></pre>
  "                             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 2]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [1] == tag_counter.next_line_offset_stack

  " Block end tag, and top block is 6.
  " ----------------------------------
  " <!--[...]>
  "     </div><div><pre><div></div></pre>
  "                                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 6, 2]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 6] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 6 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [1] == tag_counter.next_line_offset_stack

  " Block end tag, and current block is 6.
  " --------------------------------------
  " <!--[...]></div><div><pre><div></div></pre>
  "                                       ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 6, 2]
  let tag_counter.block_index = 3
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1, 0]
  let tag_counter.next_line_offset_stack = [0, 1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-2])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 6] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 6 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [0, -1] == tag_counter.current_line_offset_stack
  Assert [0, 1] == tag_counter.next_line_offset_stack

  " Block end tag, and top block is 2.
  " ----------------------------------
  " <pre><div>
  "     </div><div><script></script>
  "                         ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 2, 3]
  let tag_counter.block_index = 1
  let tag_counter.block = 2
  let tag_counter.current_line_offset = 0
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [0, 0]
  let tag_counter.next_line_offset_stack = [0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 2] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Block end tag, and current block is 2.
  " --------------------------------------
  " </div><div><pre><script></script>
  "                          ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 2, 3]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0, 0]
  let tag_counter.next_line_offset_stack = [1, 0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 2] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

  " Block end tag, and pairs with the top block.
  " --------------------------------------------
  " <!--[...]><div>
  " </div><div><![endif]-->
  "             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 6]
  let tag_counter.block_index = 1
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1]
  let tag_counter.next_line_offset_stack = [0, 1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-6])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert [0] == tag_counter.block_stack
  Assert 0 == tag_counter.block_index
  Assert 0 == tag_counter.block
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Block end tag, and pairs with the top block, and new block is added.
  " --------------------------------------------------------------------
  " <!--[...]><div>
  " </div><div><![endif]--><script></script>
  "                                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = [0, 3]
  let tag_counter.block_index = 1
  let tag_counter.block = 3
  let tag_counter.current_line_offset = 0
  let tag_counter.next_line_offset = 0
  let tag_counter.current_line_offset_stack = [0, 0]
  let tag_counter.next_line_offset_stack = [0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert [0] == tag_counter.block_stack
  Assert 0 == tag_counter.block_index
  Assert 0 == tag_counter.block
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [0] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " Block end tag, and pairs with current block.
  " --------------------------------------------
  " </div><div><!--[...]><div></div><![endif]-->
  "                                  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 6]
  let tag_counter.block_index = 2
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-6])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [1] == tag_counter.next_line_offset_stack

  " Block end tag, and pairs with current block, and new block is added.
  " --------------------------------------------------------------------
  " </div><div><!--[...]><div></div><![endif]--><script></script>
  "                                                      ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 3]
  let tag_counter.block_index = 2
  let tag_counter.block = 3
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0] == tag_counter.block_stack
  Assert 1 == tag_counter.block_index
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [1] == tag_counter.next_line_offset_stack

  " Block end tag, and current block is 2, and parent block is 6.
  " -------------------------------------------------------------
  " </div><div><!--[...]><div><pre><script></script>
  "                                         ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 6, 2, 3]
  let tag_counter.block_index = 3
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 2
  let tag_counter.current_line_offset_stack = [-1, 0, 0, 0]
  let tag_counter.next_line_offset_stack = [1, 1, 0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, [-3])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 6, 2] == tag_counter.block_stack
  Assert 3 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1, 0, 0] == tag_counter.current_line_offset_stack
  Assert [1, 1, 0] == tag_counter.next_line_offset_stack

Execute (s:CheckTag()):
  let method = 's:CheckTag'

  " Custom start tag, and block is 0.
  " ---------------------------------
  " </div><div><custom-tag>
  "             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['custom-tag'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [2] == tag_counter.next_line_offset_stack

  " Block start tag, and current block is 2.
  " ----------------------------------------
  " </div><div><pre><!--[...]><div>
  "                  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block_stack = ['guard', 0, 2]
  let tag_counter.block_index = 2
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['!--['])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert ['guard', 0, 2, 6] == tag_counter.block_stack
  Assert 2 == tag_counter.block_index
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0, 0] == tag_counter.next_line_offset_stack

  " Start tag, and current block is 0.
  " ----------------------------------
  " </div><div><div>
  "             ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [2] == tag_counter.next_line_offset_stack

  " Start tag, and current block is 6.
  " ----------------------------------
  " <!--[...]--><div>
  "     </div><div><div>
  "                 ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 6 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [2] == tag_counter.next_line_offset_stack

  " Start tag, and current block is 2.
  " ----------------------------------
  " </div><div><pre><div>
  "                  ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1, 0]
  let tag_counter.next_line_offset_stack = [1, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [-1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0] == tag_counter.next_line_offset_stack

  " End tag, and block is 0.
  " ------------------------
  " </div><div><p></p></div>
  "                    ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 0
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " End tag, and block is 6.
  " ------------------------
  " <!--[...]><div>
  " </div><div><p></p></div>
  "                    ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 6
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [-1]
  let tag_counter.next_line_offset_stack = [1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 6 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset
  Assert [-1] == tag_counter.current_line_offset_stack
  Assert [0] == tag_counter.next_line_offset_stack

  " End tag, and block is 2.
  " ------------------------
  " </div><div><pre><div><p></p></div>
  "                              ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1]
  let tag_counter.next_line_offset_stack = [0, 1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [0, -1] == tag_counter.current_line_offset_stack
  Assert [0, 1] == tag_counter.next_line_offset_stack

  " End tag, and current block is 2, and top block is 6.
  " ----------------------------------------------------
  " <!--[...]><div>
  " </div><div><pre><div><p></p></div>
  "                              ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 1
  let tag_counter.current_line_offset_stack = [0, -1]
  let tag_counter.next_line_offset_stack = [0, 1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset
  Assert [0, -1] == tag_counter.current_line_offset_stack
  Assert [0, 1] == tag_counter.next_line_offset_stack

  " End tag, and current block is 2, and parent block is 6, and top block is 0.
  " ---------------------------------------------------------------------------
  " </div><div><!--[...]><div><pre><div>...</div></pre></div>
  "                                         ^ <- current tag
  let tag_counter = {}
  let tag_counter.block = 2
  let tag_counter.current_line_offset = -1
  let tag_counter.next_line_offset = 2
  let tag_counter.current_line_offset_stack = [-1, 1, 0]
  let tag_counter.next_line_offset_stack = [1, 0, 0]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  Assert 1 == HtmlIndentCall(method, ['/div'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 2 == tag_counter.block
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset
  Assert [-1, 1, 0] == tag_counter.current_line_offset_stack
  Assert [1, 0, 0] == tag_counter.next_line_offset_stack

Execute (s:UpdateCurrentLineOffset()):
  let method = 's:UpdateCurrentLineOffset'

  " Current line does not start with end tag.
  " -----------------------------------------
  " <div></div></div>
  let tag_counter = {}
  let tag_counter.root_block = 0
  let tag_counter.block_stack = ['guard', 0]
  let tag_counter.current_line_offset = -1
  call HtmlIndentSet('b:tag_counter', tag_counter)
  call HtmlIndentCall(method, ['<div></div></div>'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset

  " Root block is 2.
  " ----------------
  " <pre><div>
  " </div><div> <- current line
  let tag_counter = {}
  let tag_counter.root_block = 2
  let tag_counter.block_stack = ['guard', 2]
  let tag_counter.current_line_offset = 0
  call HtmlIndentSet('b:tag_counter', tag_counter)
  call HtmlIndentCall(method, ['</div><div>'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset

  " Root block has been reset.
  " --------------------------
  " <div><!--[...]><div>
  "     </div><![endif]></div><div> <- current line
  let tag_counter = {}
  let tag_counter.root_block = 6
  let tag_counter.block_stack = [0]
  let tag_counter.current_line_offset = -1
  call HtmlIndentSet('b:tag_counter', tag_counter)
  call HtmlIndentCall(method, ['</div><![endif]></div><div>'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset

  " Root block is 0.
  " ----------------
  " </div><div>
  let tag_counter = {}
  let tag_counter.root_block = 0
  let tag_counter.block_stack = ['guard', 0]
  let tag_counter.current_line_offset = -1
  let tag_counter.current_line_offset_stack = [-1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  call HtmlIndentCall(method, ['</div><div>'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert [0] == tag_counter.current_line_offset_stack

  " Root block is 6.
  " ----------------
  " <!--[...]><div>
  "     </div><div>
  let tag_counter = {}
  let tag_counter.root_block = 6
  let tag_counter.block_stack = ['guard', 6]
  let tag_counter.current_line_offset = -1
  let tag_counter.current_line_offset_stack = [-1]
  call HtmlIndentSet('b:tag_counter', tag_counter)
  call HtmlIndentCall(method, ['</div><div>'])

  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert [0] == tag_counter.current_line_offset_stack

Execute (s:CountITags()):
  let method = 's:CountITags'

  " Root block is 0, and normal tags.
  " ---------------------------------
  " <div></div>
  call HtmlIndentCall(method, ['<div></div>', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " <div>
  call HtmlIndentCall(method, ['<div>', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " </div></div>
  call HtmlIndentCall(method, ['</div></div>', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " </div></div><div>
  call HtmlIndentCall(method, ['</div></div><div>', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " Root block is 0, and current block is 6.
  " ----------------------------------------
  " </div></div><div><!--[...]><div>
  call HtmlIndentCall(method, ['</div></div><div><!--[...]><div>', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 2 == tag_counter.next_line_offset

  " Root block is 0, and current block is reset.
  " --------------------------------------------
  " </div></div><div><!--[...]><div>
  call HtmlIndentCall(method, ['</div></div><div><!--[...]><![endif]-->', 0])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " Root block is 6, and Normal tags.
  " ---------------------------------
  " <!--[...]><div><div>
  "     </div></div><div> <- current line
  call HtmlIndentCall(method, ['</div></div><div>', 6])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " Root block is 6, and current block is 2.
  " ----------------------------------------
  " <!--[...]><div><div>
  "     </div></div><div><pre><div>
  call HtmlIndentCall(method, ['</div></div><div><pre><div>', 6])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " Root block is 6, and current block is reset.
  " --------------------------------------------
  " <!--[...]><div><div>
  "     </div></div><div><pre></pre>
  call HtmlIndentCall(method, ['</div></div><div><pre></pre>', 6])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert -1 == tag_counter.current_line_offset
  Assert 1 == tag_counter.next_line_offset

  " Root block is 6, and root block is reset.
  " -----------------------------------------
  " <!--[...]><div><div>
  "     </div></div><div><![endif]-->
  call HtmlIndentCall(method, ['</div></div><div><![endif]-->', 6])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " Root block is 2, and normal tags.
  " ---------------------------------
  " <pre><div><div>
  "     </div></div><div> <- current line
  call HtmlIndentCall(method, ['</div></div><div>', 2])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " Root block is 2, and current block is 6.
  " ----------------------------------------
  " <pre><div><div>
  "     </div></div><!--[...]><div> <- current line
  call HtmlIndentCall(method, ['</div></div><!--[...]><div>', 2])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " Root block is 2, and current block is reset.
  " --------------------------------------------
  " <pre><div><div>
  "     </div></div><!--[...]><![endif]--> <- current line
  call HtmlIndentCall(method, ['</div></div><!--[...]><![endif]-->', 2])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

  " Root block is 2, and root block is reset.
  " -----------------------------------------
  " <pre><div><div>
  "     </div></div></pre> <- current line
  call HtmlIndentCall(method, ['</div></div></pre>', 2])
  let tag_counter = HtmlIndentGet('b:tag_counter')
  Assert 0 == tag_counter.current_line_offset
  Assert 0 == tag_counter.next_line_offset

Given (Fixtures of s:ValidateContext()):
  <div>
      <div>
          <div> <- current line

Execute (s:ValidateContext()):
  let method = 's:ValidateContext'

  " b:context.ready != 1
  " ---------------------------------
  let context = {}
  let context.lnum = 2
  let context.indent = 8
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 0
  call HtmlIndentSet('b:context', context)
  let v:lnum = 3
  call cursor(3, 1)
  Assert 0 == HtmlIndentCall(method, ['normal_line'])

  " b:context.state != a:state
  " --------------------------
  let context = {}
  let context.lnum = 2
  let context.indent = 8
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 1
  call HtmlIndentSet('b:context', context)
  let v:lnum = 3
  call cursor(3, 1)
  Assert 0 == HtmlIndentCall(method, ['line_inside_attribute'])

  " prevnonblank(v:lnum - 1) != b:context.lnum
  " ------------------------------------------
  let context = {}
  let context.lnum = 2
  let context.indent = 8
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 1
  call HtmlIndentSet('b:context', context)
  let v:lnum = 2
  call cursor(2, 1)
  Assert 0 == HtmlIndentCall(method, ['normal_line'])

  " b:context.changed_tick != b:changedtick - 1
  " -------------------------------------------
  let context = {}
  let context.lnum = 2
  let context.indent = 8
  let context.changed_tick = b:changedtick
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 1
  call HtmlIndentSet('b:context', context)
  let v:lnum = 3
  call cursor(3, 1)
  Assert 0 == HtmlIndentCall(method, ['normal_line'])

  " All condition matches
  " ---------------------
  let context = {}
  let context.lnum = 2
  let context.indent = 8
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 1
  call HtmlIndentSet('b:context', context)
  let v:lnum = 3
  call cursor(3, 1)
  Assert 1 == HtmlIndentCall(method, ['normal_line'])

Given (Fixtures of s:InitContextOfLineInsideAttribute()):
  <div></div>
  <div a="A">
  <div a="A"
       b="B"
  >
  <div a="A"
       b="B
       BBBBB
       CCCCC">

Execute (s:InitContextOfLineInsideAttribute()):
  let method = 's:InitContextOfLineInsideAttribute'

  " Reuse context
  " -------------
  let context = {}
  let context.lnum = 8
  let context.indent = 5
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'line_inside_attribute'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)
  let v:lnum = 9
  call cursor(9, 1)

  let context = {}
  let context.lnum = 8
  let context.ready = 0
  Assert {'lnum': 8, 'indent_inside_block': -1, 'script_type': '',
        \ 'indent': 5, 'ready': 1, 'message': 'cache',
        \ 'state': 'line_inside_attribute', 'root_block': 0, 'changed_tick':b:changedtick - 1,
        \ 'block_start_tag_lnum': 0, 'block': 0} == HtmlIndentCall(method, [context])

  let context = {}
  let context.lnum = 0
  let context.ready = 0
  call HtmlIndentSet('b:context', context)

  " context.lnum < 1
  " --------------
  let context = {}
  let context.lnum = 0
  let context.ready = 0
  Assert context == HtmlIndentCall(method, [context])

  " context.lnum == 1
  " ---------------
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  Assert context == HtmlIndentCall(method, [context])

  " Current line starts with '<'
  " ----------------------------
  " <div a="A"
  " ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  call cursor(3, 1)
  let v:lnum = 3
  runtime! syntax/html.vim
  Assert context == HtmlIndentCall(method, [context])
  Assert [3, 1] == [line('.'), col('.')]
  unlet b:current_syntax

  " Inside tag
  " ----------
  " <div a="A"
  "      b="B"
  " ^ <- cursor
  let context = {}
  let context.lnum = 3
  let context.ready = 0
  call cursor(4, 1)
  let v:lnum = 4
  runtime! syntax/html.vim
  Assert context == HtmlIndentCall(method, [context])
  Assert [4, 6] == [line('.'), col('.')]
  unlet b:current_syntax

  " Inside attribute
  " ----------------
  " <div a="A"
  "      b="B
  "      BBBBB"
  " ^ <- cursor
  let context = {}
  let context.lnum = 7
  let context.ready = 0
  call cursor(8, 1)
  let v:lnum = 8
  runtime! syntax/html.vim
  Assert {'lnum': 7, 'indent': 5, 'state': 'line_inside_attribute', 'ready': 1} == HtmlIndentCall(method, [context])
  Assert [8, 6] == [line('.'), col('.')]
  unlet b:current_syntax

Given (Fixtures of s:InitContextOfLineInsideTag()):
  <div a="A">
  </div>
  <div a="A" b="B" c="C"
                   d="D" e="E"
                         f="F" g="G"
  >
  </div>

Execute (s:InitContextOfLineInsideTag()):
  let method = 's:InitContextOfLineInsideTag'

  " Reuse context
  " -------------
  let context = {}
  let context.lnum = 4
  let context.indent = 5
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'line_inside_tag'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)

  let v:lnum = 5
  call cursor(5, 1)

  let context = {}
  let context.lnum = 4
  let context.ready = 0
  Assert {'lnum': 4, 'indent_inside_block': -1, 'script_type': '',
         \'indent': 5, 'ready': 1, 'message': 'cache',
         \'state': 'line_inside_tag', 'root_block': 0, 'changed_tick': b:changedtick - 1,
         \'block_start_tag_lnum': 0, 'block': 0} == HtmlIndentCall(method, [context])

  let context = {}
  let context.lnum = 0
  let context.ready = 0
  let context.indent = 5
  call HtmlIndentSet('b:context', context)

  " Current line starts with '<'
  " ---------------------------
  " <div a="A" b="B" c="C"
  " ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  call cursor(3, 1)
  let v:lnum = 3
  runtime! syntax/html.vim
  Assert context == HtmlIndentCall(method, [context])
  Assert [3, 1] == [line('.'), col('.')]
  unlet b:current_syntax

  " <div a="A" b="B" c="C"
  "                  d="D" e="E"
  " ^ <- cursor
  let context = {}
  let context.lnum = 3
  let context.ready = 0
  call cursor(4,1)
  let v:lnum = 4
  runtime! syntax/html.vim
  Assert {'lnum': 3, 'indent': 5, 'state': 'line_inside_tag', 'ready': 1} == HtmlIndentCall(method, [context])
  Assert [4, 18] == [line('.'), col('.')]
  unlet b:current_syntax

Given (Fixtures of s:InitContextOfLineInsideBlock):
  <pre><div></div></pre>
  <div><pre>
      <div></div></pre></div>
  <div><!--[...]>
      <div>
          <div></div>
      </div>
      <div><pre>
          <div>
          <div></div>
          </div>
          </pre></div>
      <div>
          <div></div>
      </div>
  <![endif]--></div>
  <div><pre>
      <div><!--[...]>
      <div>
      <div></div>
      </div>
      <![endif]--></div>
      </pre></div>
  <div><script>
          var i = "hello";
          var j = "world";
      </script></div>

Execute (s:InitContextOfLineInsideBlock()):
  let method = 's:InitContextOfLineInsideBlock'

  " Reuse context
  " -------------
  let context = {}
  let context.lnum = 19
  let context.indent = 4
  let context.changed_tick = b:changedtick - 1
  let context.block = 6
  let context.block_start_tag_lnum = 18
  let context.script_type = ''
  let context.indent_inside_block = 4
  let context.root_block = 2
  let context.state = 'line_inside_block'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)

  let v:lnum = 20
  call cursor(20, 1)

  let context = {}
  let context.lnum = 19
  let context.ready = 0

  let tag_line = '    <div><!--[...]>'
  let tag = '!--['
  let tag_lnum = 18
  let tag_start_col = 11

  let expected = {'lnum': 19, 'indent_inside_block': 4, 'script_type': '',
                 \'indent': 4, 'ready': 1, 'message': 'cache',
                 \'state': 'line_inside_block', 'root_block': 2, 'changed_tick': b:changedtick - 1,
                 \'block_start_tag_lnum': 18, 'block': 6}

  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  let context = {}
  let context.lnum = 0
  let context.ready = 0
  call HtmlIndentSet('b:context', context)

  " The block tag is empty (not inside any block).
  " ----------------------------------------------
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let tag_line = ''
  let tag = ''
  let tag_lnum = 0
  let tag_start_col = 0
  let v:lnum = 2
  Assert {'lnum': 1, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " The tag is not a block start tag.
  " ---------------------------------
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let tag_line = '</pre>'
  let tag = '/pre'
  let tag_lnum = 1
  let tag_start_col = 2
  let v:lnum = 2
  Assert {'lnum': 1, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " The block tag line number is not greater than 0.
  " ------------------------------------------------
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let tag_line = '<pre>'
  let tag = 'pre'
  let tag_lnum = 0
  let tag_start_col = 2
  let v:lnum = 2
  Assert {'lnum': 1, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " Cursor and block start tag are in the same line.
  " ------------------------------------------------
  let context = {}
  let context.lnum = 0
  let context.ready = 0
  let v:lnum = 1
  call cursor(1, 6)
  let tag_line = '<pre><div></div></pre>'
  let tag = 'pre'
  let tag_lnum = 1
  let tag_start_col = 2
  Assert {'lnum': 0, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " Cursor is at or after the Block end tag.
  " ----------------------------------------
  " <div><pre>
  "     <div></div></pre></div>
  "                     ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  let v:lnum = 3
  call cursor(3, 21)
  let tag_line = '    <div></div></pre></div>'
  let tag = '/pre'
  let tag_lnum = 3
  let tag_start_col = 13
  Assert {'lnum': 2, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [3, 21] == [line('.'), col('.')]

  " Current line is after the line of block end tag.
  " NOTE: In this case, although current line is actually inside block 6, it is
  " detected as the current block. In stead, current line will be indented to
  " its previous line as a normal line.
  " ---------------------------------------------------------------------------
  " <div><!--[...]>
  "    <div><pre>
  "        <div>
  "            <div></div>
  "        </div>
  "        </pre></div>
  "    <div>
  "        <div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 13
  let context.ready = 0
  let v:lnum = 14
  call cursor(14, 1)
  let tag_line = '        </pre></div>'
  let tag = '/pre'
  let tag_lnum = 12
  let tag_start_col = 10
  Assert {'lnum': 13, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [14, 1] == [line('.'), col('.')]

  " Current block is 6, and current line is not the first line in current block.
  " ----------------------------------------------------------------------------
  " <div><!--[...]>
  "     <div>
  "         <div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 5
  let context.ready = 0
  let v:lnum = 6
  call cursor(6, 1)
  let tag_line = '<div><!--[...]>'
  let tag = '!--['
  let tag_lnum = 4
  let tag_start_col = 7
  let expected = {'lnum': 5, 'indent_inside_block': 4, 'state': 'line_inside_block', 'ready': 0, 'root_block': 0, 'block_start_tag_lnum': 4, 'block': 6}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [4, 6] == [line('.'), col('.')]

  " Parent block is 0, and current block is 6, and current line is the first
  " line in current block.
  " ----------------------------------------------------------------------------
  " <div><!--[...]>
  "    <div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 4
  let context.ready = 0
  let v:lnum = 5
  call cursor(5, 1)
  let tag_line = '<div><!--[...]>'
  let tag = '!--['
  let tag_lnum = 4
  let tag_start_col = 7
  let expected = {'lnum': 4, 'indent_inside_block': 4, 'indent': 4, 'state': 'line_inside_block', 'ready': 1, 'root_block': 0, 'block_start_tag_lnum': 4, 'block': 6}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [4, 6] == [line('.'), col('.')]

  " Parent block is 0, and current block is 2
  " -----------------------------------------
  " <div><pre>
  "    <div></div></pre></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  let v:lnum = 3
  call cursor(3, 1)
  let tag_line = '<div><pre>'
  let tag = 'pre'
  let tag_lnum = 2
  let tag_start_col = 7
  let expected = {'lnum': 2, 'indent_inside_block': 4, 'indent': 4, 'state': 'line_inside_block', 'ready': 1, 'root_block': 0, 'block_start_tag_lnum': 2, 'block': 2}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [2, 6] == [line('.'), col('.')]

  " Parent block is 6, and current block is 2
  " -----------------------------------------
  " <div><!--[...]>
  "     <div>
  "         <div></div>
  "     </div>
  "     <div><pre>
  "         <div>
  "         <div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 9
  let context.ready = 0
  let v:lnum = 10
  call cursor(10, 1)
  let tag_line = '    <div><pre>'
  let tag = 'pre'
  let tag_lnum = 8
  let tag_start_col = 11
  let expected = {'lnum': 9, 'indent_inside_block': 8, 'indent': 8, 'state': 'line_inside_block', 'ready': 1, 'root_block': 6, 'block_start_tag_lnum': 8, 'block': 2}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [8, 10] == [line('.'), col('.')]

  " Parent block is 2, and current block is 6, and current line is not the first
  " line in current block.
  " ----------------------------------------------------------------------------
  " <div><pre>
  "     <div><!--[...]>
  "     <div>
  "     <div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 19
  let context.ready = 1
  let v:lnum = 20
  call cursor(20, 1)
  let tag_line = '    <div><!--[...]>'
  let tag = '!--['
  let tag_lnum = 18
  let tag_start_col = 11
  let expected = {'lnum': 19, 'indent_inside_block': 4, 'state': 'line_inside_block', 'ready': 1, 'root_block': 2, 'block_start_tag_lnum': 18, 'block': 6}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [18, 10] == [line('.'), col('.')]

  " Parent block is 2, and current block is 6, and current line is not the first
  " line in current block.
  " ----------------------------------------------------------------------------
  " <div><pre>
  "     <div><!--[...]>
  "     <div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 18
  let context.ready = 0
  let v:lnum = 19
  call cursor(19, 1)
  let tag_line = '    <div><!--[...]>'
  let tag = '!--['
  let tag_lnum = 18
  let tag_start_col = 11
  let expected = {'lnum': 18, 'indent_inside_block': 4, 'indent': 4, 'state': 'line_inside_block', 'ready': 1, 'root_block': 2, 'block_start_tag_lnum': 18, 'block': 6}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [18, 10] == [line('.'), col('.')]

  " Current block is a <script> block.
  " ----------------------------------
  " <div><script>
  "         var i = "hello";
  "         var j = "world";
  " ^ <- cursor
  let context = {}
  let context.lnum = 25
  let context.ready = 0
  let v:lnum = 26
  call cursor(26, 1)
  let tag_line = '<div><script>'
  let tag = 'script'
  let tag_lnum = 24
  let tag_start_col = 7
  let expected = {'lnum': 25, 'indent_inside_block': 4, 'block_start_tag_lnum': 24, 'indent': 4, 'state': 'line_inside_block', 'ready': 1, 'root_block': 0, 'script_type': 'javascript', 'block': 3}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [24, 6] == [line('.'), col('.')]

Given (Fixtures of s:FindStartTag()):
  <div><custom-tag><div></div></custom-tag></div>
  <div><custom-tag><div></div>
       </custom-tag></div>
  <div><pre><div></div></pre></div>
  <div><pre><div></div>
      </pre></div>
  <div><div></div></div>
  <div><div>
      </div></div>
  <div><foo></bar></div>

Execute (s:FindStartTag()):
  let method = 's:FindStartTag'
  " Custom start tag and end tag are in the same line
  " -------------------------------------------------
  " <div><custom-tag><div></div></custom-tag></div>
  "                             ^ <- cursor
  call cursor(1, 29)
  Assert 1 == HtmlIndentCall(method, [])
  Assert [1, 6] == [line('.'), col('.')]

  " Custom start tag and end tag are in different lines
  " ---------------------------------------------------
  " <div><custom-tag><div></div>
  "     </custom-tag></div>
  " ^  <- cursor
  call cursor(3, 1)
  Assert 2 == HtmlIndentCall(method, [])
  Assert [2, 6] == [line('.'), col('.')]

  " Block start tag and end tag are in the same line
  " -------------------------------------------------
  " <div><pre><div></div></pre></div>
  "                      ^ <- cursor
  call cursor(4, 22)
  Assert 4 == HtmlIndentCall(method, [])
  Assert [4, 6] == [line('.'), col('.')]

  " Block start tag and end tag are in different lines
  " ---------------------------------------------------
  " <div><pre><div></div>
  "     </pre></div>
  " ^ <- cursor
  call cursor(6, 1)
  Assert 5 == HtmlIndentCall(method, [])
  Assert [5, 6] == [line('.'), col('.')]

  " Normal start tag and end tag are in the same line
  " -------------------------------------------------
  " <div><div></div></div>
  "           ^ <- cursor
  call cursor(7, 11)
  Assert 7 == HtmlIndentCall(method, [])
  Assert [7, 6] == [line('.'), col('.')]

  " Normal start tag and end tag are in different lines
  " ---------------------------------------------------
  " <div><div>
  "     </div></div>
  " ^ <- cursor
  call cursor(9, 1)
  Assert 8 == HtmlIndentCall(method, [])
  Assert [8, 6] == [line('.'), col('.')]

  " Start tag not found.
  " ---------------------------------------------------
  " <div><foo></bar><div>
  "           ^ <- cursor
  call cursor(10, 11)
  Assert 0 == HtmlIndentCall(method, [])
  Assert [10, 11] == [line('.'), col('.')]

Given (Fixtures of s:InitContextOfPrefixBeforeStartTag()):
  <div>
  </div><div><div><p></p></div></div>
  <div>
  </div><div><ul>
          <li>
          </li>
      </ul></div>
  <div>
  </div><div><ul a="A"
                 b="B"><li>
      </li></ul>
  </div>

Execute (s:InitContextOfPrefixBeforeStartTag()):
  let method = 's:InitContextOfPrefixBeforeStartTag'

  " Start tag and end tag are on the same line.
  " -------------------------------------------
  " </div><div><div><p></p></div></div>
  "                        ^ <- cursor
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  call cursor(2, 24)
  let expected = {'lnum': 1, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [2, 12] == [line('.'), col('.')]

  " Start tag and end tag are on different lines.
  " ---------------------------------------------
  " </div><div><ul>
  "         <li>
  "         </li>
  "     </ul></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 6
  let context.ready = 0
  call cursor(7, 1)
  Assert {'lnum': 6, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0} == HtmlIndentCall(method, [context])
  Assert [4, 12] == [line('.'), col('.')]

  " Start tag and end tag are on different lines, and start tag starts with
  " something inside a tag.
  " -----------------------------------------------------------------------
  " </div><div><ul a="A"
  "                b="B"><li>
  "     </li></ul>
  " ^ <- cursor
  " </div>
  let context = {}
  let context.lnum = 10
  let context.ready = 0
  call cursor(11, 1)
  let expected = {'lnum': 10, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [9, 12] == [line('.'), col('.')]

Given (Fixtures of s:InitContextOfLineStartsWithEndTag):
  <div>
      <div></div></div>
  <div><a>
      </a></div>
  <!--[...]>
      <pre>
          <div></div>
      </pre>
      <div><a>
          </a></div>
  <![endif]-->
  <div><div class="container"
            style="width: 100px"><a>
      </a></div></div>

Execute (s:InitContextOfLineStartsWithEndTag()):
  let method = 's:InitContextOfLineStartsWithEndTag'

  " Current line does not start with end tag.
  " ----------------------------------------
  "     <div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let v:lnum = 2
  call cursor(2, 1)
  Assert {'lnum': 1, 'ready': 0} == HtmlIndentCall(method, [context])
  Assert [2, 1] == [line('.'), col('.')]

  " Parent block is 0, and current line starts with end tag.
  " --------------------------------------------------------
  " <div><a>
  "     </a></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 3
  let context.ready = 0
  let v:lnum = 4
  call cursor(4, 1)
  let expected = {'lnum': 3, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [3, 6] == [line('.'), col('.')]

  " Parent block is 6, and current line starts with end tag.
  " -------------------------------------------------------
  " <!--[...]>
  "     <pre>
  "         <div></div>
  "     </pre>
  "     <div><a>
  "         </a></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 9
  let context.ready = 0
  let v:lnum = 10
  call cursor(10, 1)
  let expected = {'lnum': 9, 'indent': 8, 'state': 'normal_line', 'ready': 1, 'root_block': 6}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [9, 10] == [line('.'), col('.')]

  " Current line starts with end tag, and the line of start tag does not start
  " with '<'
  " --------------------------------------------------------------------------
  " <div><div class="container"
  "           style="width: 100px"><a>
  "     </a></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 13
  let context.ready = 0
  let v:lnum = 14
  call cursor(14, 1)
  let expected = {'lnum': 13, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [12, 6] == [line('.'), col('.')]

Given (Fixtures of s:InitContextOfLineAfterEndTag):
  <div>
      <div>
      </div></div>
  <div><a>
      </a>
      <div></div></div>
  <!--[...]>
      <pre>
          <div></div>
      </pre>
      <div><a>
          </a>
          <div></div></div>
  <![endif]-->
  <div><div class="container"
            style="width: 100px"><a>
      </a>
      <div></div></div></div>

Execute (s:InitContextOfLineAfterEndTag()):
  let method = 's:InitContextOfLineAfterEndTag'

  " Current line is not after any end tag.
  " ----------------------------------------
  " <div>
  "     <div>
  "     </div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  let v:lnum = 3
  call cursor(3, 1)
  Assert {'lnum': 2, 'ready': 0} == HtmlIndentCall(method, [context])
  Assert [3, 1] == [line('.'), col('.')]

  " Parent block is 0, and current line is after an end tag.
  " --------------------------------------------------------
  " <div><a>
  "     </a>
  "     <div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 5
  let context.ready = 0
  let v:lnum = 6
  call cursor(6, 1)
  let expected = {'lnum': 5, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [4, 6] == [line('.'), col('.')]

  " Parent block is 6, and current line is after an end tag.
  " -------------------------------------------------------
  " <!--[...]>
  "     <pre>
  "         <div></div>
  "     </pre>
  "     <div><a>
  "         </a>
  "         <div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 12
  let context.ready = 0
  let v:lnum = 13
  call cursor(13, 1)
  let expected = {'lnum': 12, 'indent': 8, 'state': 'normal_line', 'ready': 1, 'root_block': 6}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [11, 10] == [line('.'), col('.')]

  " Current line is after an end tag, and the line of start tag does not start
  " with '<'
  " --------------------------------------------------------------------------
  " <div><div class="container"
  "           style="width: 100px"><a>
  "     </a>
  "     <div></div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 17
  let context.ready = 0
  let v:lnum = 18
  call cursor(18, 1)
  let expected = {'lnum': 17, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [15, 6] == [line('.'), col('.')]

Given (Fixtures of s:InitContextOfLineAfterBlock()):
  <div><pre>
      <div></div></pre></div>
  <div></div>
  <!--[...]>
      <div><pre>
          <div></div></pre></div>
      <div></div>
  <![endif]-->
  <pre>
      <div><!--[...]>
          <div></div><![endif]--></div>
      <div></div>
  </pre>

Execute (s:InitContextOfLineAfterBlock()):
  let method = 's:InitContextOfLineAfterBlock'

  " Current block tag is not a block end tag.
  " In fact, this case won't be triggered because current line has become a line
  " inside block, which will be handled by the s:InitContextOfLineInsideBlock()
  " method.
  " ---------------------------------------------------------------------------
  " <pre>
  "     <div>
  "     ^ <- cursor
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let tag_line = '<pre>'
  let tag = 'pre'
  let tag_lnum = 1
  let tag_start_col = 2
  let v:lnum = 2
  Assert {'lnum': 1, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " Line number of block end tag is less than context.lnum.
  " -----------------------------------------------------
  " <pre>
  " </pre>
  " <div> <- context.lnum
  "    <div></div>
  "    ^ <- cursor
  " </div>
  let context = {}
  let context.lnum = 3
  let context.ready = 0
  let tag_line = '</pre>'
  let tag = '/pre'
  let tag_lnum = 2
  let tag_start_col = 2
  let v:lnum = 4
  Assert {'lnum': 3, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " There is no block end tag (line number of block end tag is 0).
  " --------------------------------------------------------------
  " <div></div>
  " <div>
  "     <div></div>
  "     ^ <- cursor
  " </div>
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  let tag_line = ''
  let tag = ''
  let tag_lnum = 0
  let tag_start_col = 0
  let v:lnum = 3
  Assert {'lnum': 2, 'ready': 0} == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])

  " Parent block is 0, current line is after the line of a block end tag.
  " ---------------------------------------------------------------------
  " <div><pre>
  "     <div></div></pre></div>
  " <div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 2
  let context.ready = 0
  let tag_line = '    <div></div></pre></div>'
  let tag = '/pre'
  let tag_lnum = 2
  let tag_start_col = 17
  let v:lnum = 3
  call cursor(3, 1)
  let expected = {'lnum': 2, 'indent': 0, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [2, 27] == [line('.'), col('.')]

  " Parent block is 6, current line is after the line of a block end tag.
  " ---------------------------------------------------------------------
  " <!--[...]>
  "     <div><pre>
  "         <div></div></pre></div>
  "     <div></div>
  " ^ <- cursor
  " <![endif]-->
  let context = {}
  let context.lnum = 6
  let context.ready = 0
  let tag_line = '        <div></div></pre></div>'
  let tag = '/pre'
  let tag_lnum = 6
  let tag_start_col = 21
  let v:lnum = 7
  call cursor(7, 1)
  let expected = {'lnum': 6, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 6}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [6, 31] == [line('.'), col('.')]

  " Parent block is 2, current line is after the line of a block end tag.
  " ---------------------------------------------------------------------
  " <pre>
  "     <div><!--[...]>
  "         <div></div><![endif]--></div>
  "     <div></div>
  " ^ <- cursor
  " </pre>
  let context = {}
  let context.lnum = 11
  let context.ready = 0
  let tag_line = '        <div></div><![endif]--></div>'
  let tag = '![endif]--'
  let tag_lnum = 11
  let tag_start_col = 21
  let v:lnum = 12
  call cursor(12, 1)
  let expected = {'lnum': 11, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 2}
  Assert expected == HtmlIndentCall(method, [context, tag_line, tag, tag_lnum, tag_start_col])
  Assert [11, 37] == [line('.'), col('.')]

Given (Fixtures of s:FindTagStart()):
  <div><div>
  </div></div>abc
  <div><di
          v>abc
  </div></div>abc
  <div></di
           v>
  <
  div>abc
  <div
  >
  </
  div>abc
  </div
  >

Execute (s:FindTagStart()):
  let method = 's:FindTagStart'

  " Find start of a start tag in one line
  " -------------------------------------
  " <div><div>
  " ^ <- cursor
  call cursor(1, 1)
  Assert [1, 1] == HtmlIndentCall(method, [1])
  Assert [1, 6] == [line('.'), col('.')]

  " Find start of a start tag in differnt line
  " -------------------------------------------
  " <div><di
  "         v>abc
  " ^ <- cursor
  call cursor(4, 1)
  Assert [3, 1] == HtmlIndentCall(method, [4])
  Assert [3, 6] == [line('.'), col('.')]

  " Find start of an end tag in one line
  " -------------------------------------
  " </div></div>abc
  " ^ <- cursor
  call cursor(2, 1)
  Assert [2, 1] == HtmlIndentCall(method, [2])
  Assert [2, 7] == [line('.'), col('.')]

  " Find start of an end tag in differnt line
  " -------------------------------------------
  " <div></di
  "          v>
  " ^ <- cursor
  call cursor(7, 1)
  Assert [6, 1] == HtmlIndentCall(method, [7])
  Assert [6, 6] == [line('.'), col('.')]

  " Find start of a start tag in differnt line, but there is no character after
  " the start bracket.
  " ---------------------------------------------------------------------------
  " <
  " div>abc
  " ^ <- cursor
  call cursor(9, 1)
  Assert [9, 0] == HtmlIndentCall(method, [9])
  Assert [9, 3] == [line('.'), col('.')]

  " Find start of a start tag in differnt line, but there is no character before
  " the end bracket.
  " ---------------------------------------------------------------------------
  " <div
  " >
  " ^ <- cursor
  call cursor(11, 1)
  Assert [11, 0] == HtmlIndentCall(method, [11])
  Assert [11, 1] == [line('.'), col('.')]

  " Find start of an end tag in differnt line, but there is no character after
  " the start bracket.
  " ---------------------------------------------------------------------------
  " </
  " div>abc
  " ^ <- cursor
  call cursor(13, 1)
  Assert [12, 1] == HtmlIndentCall(method, [13])
  Assert [12, 1] == [line('.'), col('.')]

Given (Fixtures of s:InitContextOfNormalLine()):
  <div>
      <div></div></div>
  <!--[...]>
      <pre>
      </pre>
      <div>
          <div></div></div><![endif]-->
  <pre>
      <pre>
      </pre>
      <div>
      <div></div></div></pre>
  <div><di
      v>
      <div></div></div></div>
  <div><di
      v><div>
          <div></div></div></div></div>

Execute (s:InitContextOfNormalLine()):
  let method = 's:InitContextOfNormalLine'

  " Reuse context
  " -------------
  let context = {}
  let context.lnum = 1
  let context.indent = 4
  let context.changed_tick = b:changedtick - 1
  let context.block = 0
  let context.block_start_tag_lnum = 0
  let context.script_type = ''
  let context.indent_inside_block = -1
  let context.root_block = 0
  let context.state = 'normal_line'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)

  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let v:lnum = 2
  call cursor(2, 1)
  let expected = {'lnum': 1, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 4, 'ready': 1, 'message': 'cache',
                 \'state': 'normal_line', 'root_block': 0, 'changed_tick': b:changedtick - 1,
                 \'block_start_tag_lnum': 0, 'block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [2, 1] == [line('.'), col('.')]

  let context = {}
  let context.lnum = 0
  let context.ready = 0
  call HtmlIndentSet('b:context', context)

  " Root block is 0
  " ---------------
  " <div>
  "     <div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let v:lnum = 2
  call cursor(2, 1)
  let expected = {'lnum': 1, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [1, 5] == [line('.'), col('.')]

  " Root block is 6
  " ---------------
  " <!--[...]>
  "     <pre>
  "     </pre>
  "     <div>
  "         <div></div></div><![endif]-->
  " ^ <- cursor
  let context = {}
  let context.lnum = 6
  let context.ready = 0
  let v:lnum = 7
  call cursor(7, 1)
  let expected = {'lnum': 6, 'indent': 8, 'state': 'normal_line', 'ready': 1, 'root_block': 6}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [6, 9] == [line('.'), col('.')]

  " Root block is 2
  " ---------------
  " <pre>
  "     <pre>
  "     </pre>
  "     <div>
  "     <div></div></div></pre>
  " ^ <- cursor
  let context = {}
  let context.lnum = 11
  let context.ready = 0
  let v:lnum = 12
  call cursor(12, 1)
  let expected = {'lnum': 11, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 2}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [11, 9] == [line('.'), col('.')]

  " Root block is 0, and the previous line is an incomplete tag (left bracket is
  " in the previous previous line).
  " ----------------------------------------------------------------------------
  " <div><di
  "     v>
  "     <div></div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 14
  let context.ready = 0
  let v:lnum = 15
  call cursor(15, 1)
  let expected = {'lnum': 13, 'indent': 4, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [13, 8] == [line('.'), col('.')]

  " Root block is 0, and the previous line starts with an incomplete tag (left
  " bracket is " in the previous previous line) and ends with a complete tag.
  " ----------------------------------------------------------------------------
  " <div><di
  "     v><div>
  "         <div></div></div></div></div>
  " ^ <- cursor
  let context = {}
  let context.lnum = 17
  let context.ready = 0
  let v:lnum = 18
  call cursor(18, 1)
  let expected = {'lnum': 17, 'indent': 8, 'state': 'normal_line', 'ready': 1, 'root_block': 0}
  Assert expected == HtmlIndentCall(method, [context])
  Assert [17, 11] == [line('.'), col('.')]

Given (Fixtures of s:InitContext()):
  <div class="container"
       style="color: red;
       border: 1px solid #ff0000;"></div>
  <div><script>
      var i = 1;
      </script></div>
  <div><div>
          <div></div>
      </div></div>
  <div></div>
  <div><script>
      </script><div>
          <div></div></div></div>
  <div><div>
          <div></div></div></div>

Execute (s:InitContext()):
  let method = 's:InitContext'

  " Line number is 0
  " ----------------
  let v:lnum = 0
  let expected = {'lnum': 0, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': -1, 'ready': 0, 'state': 'normal_line',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [0])

  " Current line is inside an attribute
  " -----------------------------------
  " <div class="container"
  "      style="color: red;
  "      border: 1px solid #ff0000;"></div>
  " ^ <- cursor
  let v:lnum = 3
  call cursor(3, 1)
  runtime! syntax/html.vim
  let expected = {'lnum': 2, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 5, 'ready': 1, 'state': 'line_inside_attribute',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [3])
  Assert [3, 6] == [line('.'), col('.')]
  unlet b:current_syntax

  " Current line is inside a tag
  " ----------------------------
  " <div class="container"
  "      style="color: red;
  " ^ <- cursor
  "      border: 1px solid #ff0000;"></div>
  let v:lnum = 2
  call cursor(2, 1)
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let context.indent = 4
  call HtmlIndentSet('b:context', context)
  runtime! syntax/html.vim
  let expected = {'lnum': 1, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 4, 'ready': 1, 'state': 'line_inside_tag',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [2])
  Assert [2, 6] == [line('.'), col('.')]
  unlet b:current_syntax

  " Current line is inside a block
  " -----------------------------------
  " <div><script>
  "     var i = 1;
  " ^ <- cursor
  "     </script></div>
  let v:lnum = 5
  call cursor(5, 1)
  let expected = {'lnum': 4, 'indent_inside_block': 4, 'script_type': 'javascript',
                 \'indent': 4, 'ready': 1, 'state': 'line_inside_block',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 4,
                 \'block': 3}
  Assert expected == HtmlIndentCall(method, [5])
  Assert [4, 6] == [line('.'), col('.')]

  " Current line starts with an end tag.
  " -----------------------------------
  " <div><div>
  "         <div></div>
  "     </div></div>
  " ^ <- cursor
  let v:lnum = 9
  call cursor(9, 1)
  let expected = {'lnum': 8, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 4, 'ready': 1, 'state': 'normal_line',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [9])
  Assert [7, 6] == [line('.'), col('.')]

  " Current line is after an end tag.
  " ---------------------------------
  " <div><div>
  "         <div></div>
  "     </div></div>
  " <div></div>
  " ^ <- cursor
  let v:lnum = 10
  call cursor(10, 1)
  let expected = {'lnum': 9, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 0, 'ready': 1, 'state': 'normal_line',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [10])
  Assert [7, 1] == [line('.'), col('.')]

  " Current line is after block.
  " ---------------------------------
  " <div><script>
  "     </script><div>
  "         <div></div></div></div>
  " ^ <- cursor
  let v:lnum = 13
  call cursor(13, 1)
  let expected = {'lnum': 12, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 8, 'ready': 1, 'state': 'normal_line',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [13])
  Assert [12, 18] == [line('.'), col('.')]

  " Current line is a normal line
  " -----------------------------
  " <div><div>
  "         <div></div></div></div>
  " ^ <- cursor
  let v:lnum = 15
  call cursor(15, 1)
  let expected = {'lnum': 14, 'indent_inside_block': -1, 'script_type': '',
                 \'indent': 8, 'ready': 1, 'state': 'normal_line',
                 \'root_block': 0, 'changed_tick': 0, 'block_start_tag_lnum': 0,
                 \'block': 0}
  Assert expected == HtmlIndentCall(method, [15])
  Assert [14, 10] == [line('.'), col('.')]

Execute (s:Alien2()):
  let method = 's:Alien2'

  call HtmlIndentSet('b:indent_ready', 0)
  Assert -1 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')

Given (Fixtures of s:Alien3()):
  <script>
      // comment one
      /* comment two */
      /*
       * comment three
       */
      var i = 'hello';
      function foo(i) {
          alert(i);
      }
  </script>

Execute (s:Alien3()):
  let method = 's:Alien3'

  let context = {}
  let context.lnum = 1
  let context.indent = 0
  let context.changed_tick = b:changedtick - 1
  let context.block = 3
  let context.block_start_tag_lnum = 1
  let context.script_type = 'javascript'
  let context.indent_inside_block = 0
  let context.root_block = 0
  let context.state = 'line_inside_block'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)

  " // comment one
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(2, 1)
  let v:lnum = 2
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [2, 1] == [line('.'), col('.')]

  " /* comment two */
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(3, 1)
  let v:lnum = 3
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [3, 1] == [line('.'), col('.')]

  " /*
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(4, 1)
  let v:lnum = 4
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [4, 1] == [line('.'), col('.')]

  " comment three
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(5, 1)
  let v:lnum = 5
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [5, 1] == [line('.'), col('.')]

  " */
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(6, 1)
  let v:lnum = 6
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [6, 1] == [line('.'), col('.')]

  " var i = 'hello';
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(7, 1)
  let v:lnum = 7
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [7, 1] == [line('.'), col('.')]

  " alert(i);
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(9, 1)
  let v:lnum = 9
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [9, 1] == [line('.'), col('.')]

Given (Fixtures of s:Alien4()):
  <style>
      /* comment one */
      /*
       * comment two
       */
      .container {
         color: red;
         border: 1px solid #ff0000;
      }
  </style>

Execute (s:Alien4()):
  let method = 's:Alien4'

  let context = {}
  let context.lnum = 1
  let context.indent = 0
  let context.changed_tick = b:changedtick - 1
  let context.block = 4
  let context.block_start_tag_lnum = 1
  let context.script_type = ''
  let context.indent_inside_block = 0
  let context.root_block = 0
  let context.state = 'line_inside_block'
  let context.ready = 1
  let context.message = "cache"
  call HtmlIndentSet('b:context', context)

  " /* comment one */
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(2, 1)
  let v:lnum = 2
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [2, 1] == [line('.'), col('.')]

  " * comment two
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(4, 1)
  let v:lnum = 4
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [4, 1] == [line('.'), col('.')]

  " */
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(5, 1)
  let v:lnum = 5
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [5, 1] == [line('.'), col('.')]

  " .container {
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(6, 1)
  let v:lnum = 6
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [6, 1] == [line('.'), col('.')]

  " color: red;
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(7, 1)
  let v:lnum = 7
  Assert cindent(v:lnum) == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [7, 1] == [line('.'), col('.')]

  " }
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(9, 1)
  let v:lnum = 9
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert [9, 1] == [line('.'), col('.')]

Given (Fixtures of s:Alien5()):
  <!--
  line one
      line two
      line three
  -->

Execute (s:Alien5()):
  let method = 's:Alien5'

  " line one
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(2, 1)
  let v:lnum = 2
  Assert 0 == HtmlIndentCall(method, [])
  Assert [2, 1] == [line('.'), col('.')]

  " line three
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(4, 1)
  let v:lnum = 4
  Assert 4 == HtmlIndentCall(method, [])
  Assert [4, 1] == [line('.'), col('.')]

Given (Fixtures of s:Alien6()):
  <!--[...]>
  line one
  <![endif]-->
  <div><!--[...]>
      line one
  <![endif]--></div>

Execute (s:Alien6()):
  let method = 's:Alien6'

  " <!--[...]>
  " line one
  " ^ <- cursor
  " <![endif]-->
  let context = {}
  let context.lnum = 1
  let context.ready = 0
  let context.block_start_tag_lnum = 1
  let context.indent_inside_block = 0
  call HtmlIndentSet('b:context', context)
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(2, 1)
  let v:lnum = 2
  Assert 0 == HtmlIndentCall(method, [])
  Assert [2, 1] == [line('.'), col('.')]

  " <div><!--[...]>
  "     line one
  " ^ <- cursor
  " <![endif]--></div>
  let context = {}
  let context.lnum = 4
  let context.ready = 0
  let context.block_start_tag_lnum = 1
  let context.indent_inside_block = 4
  call HtmlIndentSet('b:context', context)
  call HtmlIndentSet('b:indent_ready', 0)
  call cursor(5, 1)
  let v:lnum = 5
  Assert 4 == HtmlIndentCall(method, [])
  Assert [5, 1] == [line('.'), col('.')]

Execute (s:IndentOfLineInsideAttribute()):
  let method = 's:IndentOfLineInsideAttribute'

  " b:context.state != 'line_inside_attribute'
  " ------------------------------------------
  let context = {}
  let context.state = 'normal_line'
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])
  Assert 0 == HtmlIndentGet('b:indent_ready')

  " b:context.lnum == 1
  " -------------------
  let context = {}
  let context.state = 'line_inside_attribute'
  let context.lnum = 1
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])
  Assert 0 == HtmlIndentGet('b:indent_ready')

  " b:context.lnum == 0
  " -------------------
  let context = {}
  let context.state = 'line_inside_attribute'
  let context.lnum = 0
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])
  Assert 0 == HtmlIndentGet('b:indent_ready')

  " Normal case
  " -----------
  let context = {}
  let context.state = 'line_inside_attribute'
  let context.lnum = 4
  let context.indent = 8
  let v:lnum = 5
  call HtmlIndentSet('b:context', context)
  Assert 8 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 5 == context.lnum
  Assert b:changedtick == context.changed_tick

Given (Fixtures of s:IndentOfLineInsideTag()):
  <div>
  </div>
  <div a="A" b="B" c="C"
                   d="D" e="E"
                         f="F" g="G"
  >
  </div>
Execute (s:IndentOfLineInsideTag()):
  let method = "s:IndentOfLineInsideTag"

  " b:context.state != 'line_inside_tag'
  " -----------------------------------
  let context = {}
  let context.state = 'normal_line'
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])

  " b:context.lnum == 0
  " -------------------
  let context = {}
  let context.state = 'line_inside_tag'
  let v:lnum = 0
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])

  " b:context.lnum == 1
  " -------------------
  let context = {}
  let context.state = 'line_inside_tag'
  let v:lnum = 1
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])

  " indent == -1
  " -----------
  let context = {}
  let context.state = 'line_inside_tag'
  let v:lnum = 3
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])

  " Normal case
  " -----------
  let context = {}
  let context.state = 'line_inside_tag'
  let v:lnum = 4
  call HtmlIndentSet('b:context', context)
  Assert 17 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 4 == context.lnum
  Assert b:changedtick == context.changed_tick

Given (Fixtures of s:IndentOfLineInsideBlock()):
  <script>
      var i = 'hello';
      var j = 'world';
  </script>
  <style>
      .foo {
          color: red;
      }
  </style>
  <!--
   // the first line
  -->
  <!--[...]>
  The first line
  The 2nd line
  <![endif]-->

Execute (s:IndentOfLineInsideBlock()):
  let method = 's:IndentOfLineInsideBlock'

  " b:context.state != 'line_inside_block'
  " --------------------------------------
  let context = {}
  let context.state = 'normal_line'
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])

  " Line inside block 2
  " -------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 2
  let v:lnum = 3
  call HtmlIndentSet('b:context', context)
  Assert -1 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert -1 == context.indent
  Assert 3 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 3 (first line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 3
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 1
  let v:lnum = 2
  call HtmlIndentSet('b:context', context)
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 4 == context.indent
  Assert 2 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 3 (2nd line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 3
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 1
  let context.script_type = 'javascript'
  let v:lnum = 3
  call HtmlIndentSet('b:context', context)
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 4 == context.indent
  Assert 3 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 4 (first line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 4
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 4
  let v:lnum = 6
  call HtmlIndentSet('b:context', context)
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 4 == context.indent
  Assert 6 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 4 (2nd line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 4
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 4
  let v:lnum = 7
  call HtmlIndentSet('b:context', context)
  Assert 8 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 8 == context.indent
  Assert 7 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 5 (first line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 5
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 10
  let v:lnum = 11
  call HtmlIndentSet('b:context', context)
  Assert 1 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 1 == context.indent
  Assert 11 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 6 (first line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 6
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 13
  let context.lnum = 13
  let v:lnum = 14
  call HtmlIndentSet('b:context', context)
  Assert 0 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 0 == context.indent
  Assert 14 == context.lnum
  Assert b:changedtick == context.changed_tick

  " Line inside block 6 (2nd line)
  " --------------------------------
  let context = {}
  let context.state = 'line_inside_block'
  let context.block = 6
  let context.indent_inside_block = 0
  let context.block_start_tag_lnum = 13
  let context.lnum = 14
  let context.changed_tick = 0
  let context.indent = 0
  let v:lnum = 15
  call HtmlIndentSet('b:context', context)
  Assert 0 == HtmlIndentCall(method, [])
  Assert 0 == HtmlIndentGet('b:indent_ready')
  Assert 0 == context.indent
  Assert 14 == context.lnum
  Assert 0 == context.changed_tick

Given (Fixtures of s:IndentOfNormalLine()):
  <div>
      <div>
      </div>
  </div>
  <pre>
      <script>
      </script>
      <div></div>
      <div>
      </div>
  </pre>

Execute (s:IndentOfNormalLine()):
  let method = 's:IndentOfNormalLine'

  " Root block is 0
  " ---------------
  let context = {}
  let context.block = 0
  let context.root_block = 0
  let context.indent = 4
  let v:lnum = 2
  call HtmlIndentSet('b:context', context)
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 2 == context.lnum
  Assert b:changedtick == context.changed_tick
  Assert 8 == context.indent
  Assert [2, 9] == [line('.'), col('.')]

  " Root block is 2
  " ---------------
  let context = {}
  let context.block = 0
  let context.indent = 4
  let context.root_block = 2
  let v:lnum = 9
  call HtmlIndentSet('b:context', context)
  Assert 4 == HtmlIndentCall(method, [])
  Assert 1 == HtmlIndentGet('b:indent_ready')
  Assert 9 == context.lnum
  Assert b:changedtick == context.changed_tick
  Assert 4 == context.indent
  Assert [9, 9] == [line('.'), col('.')]

Given (Fixtures of s:IndentOfNormalLine()):
  <div>
      <div>
      </div>
  </div>
  <pre>
      <script>
      </script>
      <div></div>
      <div>
      </div>
  </pre>

Execute (s:UpdateContext()):
  let method = 's:UpdateContext'

  " Do not update indent
  " --------------------
  let context = {}
  let context.lnum = 1
  let context.changed_tick = 0
  let v:lnum = 2
  call HtmlIndentSet('b:context', context)
  call HtmlIndentCall(method, [0])
  Assert b:changedtick == context.changed_tick
  Assert 2 == context.lnum

  " Update indent (root block is 0)
  " -------------------------------
  let context = {}
  let context.lnum = 1
  let context.changed_tick = 0
  let context.root_block = 0
  let context.indent = 4
  let v:lnum = 2
  call HtmlIndentSet('b:context', context)
  call HtmlIndentCall(method, [1])
  Assert b:changedtick == context.changed_tick
  Assert 2 == context.lnum
  Assert 8 == context.indent

  " Update indent (root block is 2)
  " -------------------------------
  let context = {}
  let context.lnum = 8
  let context.changed_tick = 0
  let context.root_block = 2
  let context.indent = 4
  let v:lnum = 9
  call HtmlIndentSet('b:context', context)
  call HtmlIndentCall(method, [1])
  Assert b:changedtick == context.changed_tick
  Assert 9 == context.lnum
  Assert 4 == context.indent

Given (Fixtures of HtmlIndent()):
  <div></div>
  <div class="container"
       style="color: red;
       border:1px solid #ff0000;">
  </div>
  <div a="aaa" b="bbb"
               c="ccc" d="ddd"
                       e="eee" f="fff">
  </div>
  <pre>
      <div>
          <div></div>
      </div>
  </pre>
  <script>
      var i = "hello";
      var j = "world";
  </script>
  <style>
      .foo {
          color: red;
          border: 1px solid #ff0000;
      }
  </style>
  <!--
      // <div>
      // </div>
  -->
  <div>
      <!--[...]>
      <div></div>
      <![endif]-->
  </div>
  <div>
      <div>
      </div></div><div></div>
  <div><div>
      <div>
      </div></div>
      <div></div></div>
  <div><div><pre>
          </pre><div>
              <div></div></div>
  </div></div>
  <div>
      <div></div>
  </div>

Execute (HtmlIndent()):
  " Indent of line 1
  " ----------------
  " <div></div>
  call cursor(1, 1)
  let v:lnum = 1
  Assert 0 == HtmlIndent()

  " Indent of line inside attribute
  " -------------------------------
  " <div class="container"
  "      style="color: red;
  "      border:1px solid #ff0000;">
  " ^ <- cursor
  call cursor(4, 1)
  let v:lnum = 4
  runtime! syntax/html.vim
  Assert 5 == HtmlIndent()
  unlet b:current_syntax

  " Indent of line inside tag
  " --------------------------
  " <div a="aaa" b="bbb"
  "              c="ccc" d="ddd"
  " ^ <- cursor
  call cursor(7, 1)
  let v:lnum = 7
  runtime! syntax/html.vim
  Assert 13 == HtmlIndent()
  unlet b:current_syntax

  " Indent of line inside tag
  " --------------------------
  " <div a="aaa" b="bbb"
  "              c="ccc" d="ddd"
  "                      e="eee" f="fff">
  " ^ <- cursor
  call cursor(8, 1)
  let v:lnum = 8
  runtime! syntax/html.vim
  Assert 21 == HtmlIndent()
  unlet b:current_syntax

  " Indent of line inside block 2
  " <pre>
  "     <div>
  "         <div></div>
  " ^ <- cursor
  "     </div>
  " </pre>
  " -----------------------------
  call cursor(12, 1)
  let v:lnum = 12
  Assert -1 == HtmlIndent()

  " Indent of line inside block 3 (line 1)
  " <script>
  "     var i = "hello";
  " ^ <- cursor
  " --------------------------------------
  call cursor(16, 1)
  let v:lnum = 16
  Assert 4 == HtmlIndent()

  " Indent of line inside block 3 (line 2)
  " <script>
  "     var i = "hello";
  "     var j = "world";
  " ^ <- cursor
  " --------------------------------------
  call cursor(17, 1)
  let v:lnum = 17
  Assert 4 == HtmlIndent()

  " Indent of line inside block 4 (line 1)
  " <style>
  "     .foo {
  " ^ <- cursor
  "         color: red;
  "         border: 1px solid #ff0000;
  "     }
  " </style>
  " --------------------------------------
  call cursor(20, 1)
  let v:lnum = 20
  Assert 4 == HtmlIndent()

  " Indent of line inside block 4 (line 2)
  " <style>
  "     .foo {
  "         color: red;
  " ^ <- cursor
  "         border: 1px solid #ff0000;
  "     }
  " </style>
  " --------------------------------------
  call cursor(21, 1)
  let v:lnum = 21
  Assert 8 == HtmlIndent()

  " Indent of line inside block 5
  " <!--
  "     // <div>
  "     // </div>
  " -->
  " -----------------------------
  call cursor(27, 1)
  let v:lnum = 27
  Assert 4 == HtmlIndent()

  " Indent of line inside block 6
  " <div>
  "     <!--[...]>
  "     <div></div>
  " ^ <- cursor
  "     <![endif]-->
  " </div>
  " -----------------------------
  call cursor(31, 1)
  let v:lnum = 31
  Assert 4 == HtmlIndent()

  " Indent of line starts with end tag
  " <div>
  "     <div>
  "     </div></div><div></div>
  " ^ <- cursor
  " ----------------------------------
  call cursor(36, 1)
  let v:lnum = 36
  Assert 4 == HtmlIndent()

  " Indent of line after end tag
  " <div><div>
  "      <div>
  "      </div></div>
  "      <div></div></div>
  " ^ <- cursor
  " ----------------------------
  call cursor(40, 1)
  let v:lnum = 40
  Assert 4 == HtmlIndent()

  " Indent of line after block
  " <div><div><pre>
  "         </pre><div>
  "             <div></div></div>
  " ^ <- cursor
  " </div></div>
  " --------------------------
  call cursor(43, 1)
  let v:lnum = 43
  Assert 12 == HtmlIndent()

  " Indent of normal line
  " <div>
  "     <div></div>
  " </div>
  " ---------------------
  call cursor(46, 1)
  let v:lnum = 46
  Assert 4 == HtmlIndent()
